// TODO: make a method that deletes the ticker file everyday... or at startup
// TODO: Could then add it as a complexity as it caches files...

    public Float[][] getHistorical_data() throws Exception {
        // TODO: make a method that the ticker file everyday... or at startup, if not, just remove this if check...
        // TODO: Could then add it as a complexity as it caches files...
        if (!fileHandler.checkIsFile("data/"+ticker+".csv")) { // fetch new data if it already doesn't exist
            this.historical_data = historicalData.get(tickerYF); // using Yahoo Finance ticker format...
        }
        return historical_data;
    }


// TODO: I came the the realisation that as I have been curve fitting for the SMAs, it might not work for the future, however the algorithm does self update as the days pass but still there might be something I can do to generalise it a bit instead of just fitting it to get best returns on the data already available.


// TODO: Finnhub profile only returns info about stocks... however, it does provide LIVE PRICE DATA FOR STOCKS, CRYPTOS AND FOREX
// TODO: So I might end up using the websocket of finnhub for live data, however, it is slow compared to alpaca, atleast I think so
// TODO: if it's the case, as I'm implementing inheritance, I will use alpaca for stocks and crypto and only use finnhub for forex

// TODO: So in the watchlist, the name will be formatted accordingly even before being passed to the asset classes
// TODO: as the filename of those don't matter... eg: GBPUSD=X BTC-USD, that's the correct format for them...

// TODO: Might have a dark and light theme option, and for the stock logos, make like a circle or a square and make background of it
White so it remains consistent, and the rest in dark mode... but might just be a hassle, just an if idea

// Commands to get git commit logs...
$ git log --pretty=format:"%cD, %cr, %s" > history.csv
$ git log --pretty=format:"%cr, %s" > history.csv



// TODO: Develop the user preference class, save the preference of the user or the entire user data into a seperate folder named the username, then while logging in, initialize the class with that
// TODO: Make the news section have one news from just the trending so the user doesn't miss out on the news
// TODO: Save the output of the simulation onto a single database, at the start when user creates an account, make the user choose from the data he would like to train the model from and a option to have it auto update daily (crossover might never happen), monthly, etc. So that when the application starts, it can start those simulations and then user the stock info page is open, have the best SMAs shown on the top right, then the last actual trades executed if done so, below that an option to buy and sell
// TODO: Then add a option to choose which stocks to track for crossovers to execute trades live
